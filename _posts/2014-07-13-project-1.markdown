---
layout: default
modal-id: 1
date: 2014-07-18
img: plane.png
alt: image-alt
project-date: April 2014
client: Start Bootstrap
category: Web Development
full_content: |

    ### HuggingFace RESTful API Deployment
    <div style="text-align: center;">
        <!-- Hugging Face -->
        <img src="https://user-images.githubusercontent.com/1393562/197941700-78283534-4e68-4429-bf94-dce7ab43a941.svg" width="7%" alt="Hugging Face">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- FAST API -->
        <img src="https://user-images.githubusercontent.com/1393562/190876570-16dff98d-ccea-4a57-86ef-a161539074d6.svg" width="7%" alt="Fast API">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- REDIS LOGO -->
        <img src="https://user-images.githubusercontent.com/1393562/190876644-501591b7-809b-469f-b039-bb1a287ed36f.svg" width="7%" alt="Redis Logo">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- KUBERNETES -->
        <img src="https://user-images.githubusercontent.com/1393562/190876683-9c9d4f44-b9b2-46f0-a631-308e5a079847.svg" width="7%" alt="Kubernetes">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- Azure -->
        <img src="https://user-images.githubusercontent.com/1393562/192114198-ac03d0ef-7fb7-4c12-aba6-2ee37fc2dcc8.svg" width="7%" alt="Azure">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- K6 -->
        <img src="https://user-images.githubusercontent.com/1393562/197683208-7a531396-6cf2-4703-8037-26e29935fc1a.svg" width="7%" alt="K6">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- Grafana -->
        <img src="https://user-images.githubusercontent.com/1393562/197682977-ff2ffb72-cd96-4f92-94d9-2624e29098ee.svg" width="7%" alt="Grafana">
    </div>

    In this project, I deployed a machine learning model using **Hugging Face transformers** on **Microsoft Azure Kubernetes Service (AKS)**. The model was made accessible via RESTful APIs, and I implemented **Prometheus** and **Grafana** for real-time monitoring of key performance metrics, such as request throughput and latency. The integration of **FastAPI** enabled rapid unit testing to ensure the robustness of the API endpoints.

    #### Performance Overview

    Using **Prometheus** and **Grafana** dashboards, I tracked and optimized resource usage while maintaining high performance under stress testing. The results of the testing revealed a system latency of under 10 microseconds and a throughput exceeding 100 requests per second.

    The performance of the API was thoroughly tested using **k6.io** load testing. Below is a snapshot of the load test result:

    ![K6 Load Test Results](img/Projects Photo/HuggingFace Restful API/K6 Logs.png)

    *Figure 1: Load test results showing HTTP request durations, latency, and throughput under heavy load.*

    #### Service Monitoring

    To monitor the real-time performance and health of services, I used **Grafana dashboards** integrated with **Prometheus**. This allowed for detailed monitoring of incoming requests, latency, and throughput. Below is a key dashboard showing service performance:

    ![Service Workload Dashboard](img/Projects Photo/HuggingFace Restful API/SVC Service Workload.png)

    *Figure 2: Service workload dashboard monitoring the latency and throughput for requests across various service workloads.*

    ### Key Achievements

    - **Latency:** Maintained latency under 10 microseconds during peak load times.
    - **Throughput:** Consistently handled more than 100 requests per second.
    - **Monitoring:** Implemented **Prometheus** and **Grafana** to track resource usage and service health.
    - **Load Testing:** Leveraged **k6** for stress testing, optimizing the API for high-performance environments.
---