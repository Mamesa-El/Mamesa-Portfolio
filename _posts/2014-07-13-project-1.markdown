---
layout: default
modal-id: 1
date: 2014-07-18
img: plane.png
alt: image-alt
project-date: April 2014
client: Start Bootstrap
category: Web Development
full_content: |

    ### HuggingFace RESTful API Deployment
    <div style="text-align: center;">
        <!-- Hugging Face -->
        <img src="https://user-images.githubusercontent.com/1393562/197941700-78283534-4e68-4429-bf94-dce7ab43a941.svg" width="7%" alt="Hugging Face">
        <!-- PLUS SIGN -->
        <img src="https://user-images.githubusercontent.com/1393562/190876627-da2d09cb-5ca0-4480-8eb8-830bdc0ddf64.svg" width="7%" alt="Plus Sign">
        <!-- FAST API -->
        <img src="https://user-images.githubusercontent.com/1393562/190876570-16dff98d-ccea-4a57-86ef-a161539074d6.svg" width="7%" alt="Fast API">
        <!-- Additional Images Here -->
    </div>

    In this project, I deployed a machine learning model using **Hugging Face transformers** on **Microsoft Azure Kubernetes Service (AKS)**. The model was made accessible via RESTful APIs, and I implemented **Prometheus** and **Grafana** for real-time monitoring of key performance metrics, such as request throughput and latency. The integration of **FastAPI** enabled rapid unit testing to ensure the robustness of the API endpoints.

    #### Performance Overview

    Using **Prometheus** and **Grafana** dashboards, I tracked and optimized resource usage while maintaining high performance under stress testing. The results of the testing revealed a system latency of under 10 microseconds and a throughput exceeding 100 requests per second.

    <div style="text-align: center;">
        <img src="img/Projects Photo/HuggingFace Restful API/K6 Logs 1.png" alt="K6 Load Test Results" style="max-width: 100%; height: auto;">
    </div>

    *Figure 1: Load test results showing HTTP request durations, latency, and throughput under heavy load.*

    #### Service Monitoring

    To monitor the real-time performance and health of services, I used **Grafana dashboards** integrated with **Prometheus**. This allowed for detailed monitoring of incoming requests, latency, and throughput. Below is a key dashboard showing service performance:

    <div style="text-align: center;">
        <img src="img/Projects Photo/HuggingFace Restful API/SVC Service Workload 1.png" alt="Service Workload Dashboard" style="max-width: 100%; height: auto;">
    </div>

    *Figure 2: Service workload dashboard monitoring the latency and throughput for requests across various service workloads.*

    ### Key Achievements

    - **Latency:** Maintained latency under 10 microseconds during peak load times.
    - **Throughput:** Consistently handled more than 100 requests per second.
    - **Monitoring:** Implemented **Prometheus** and **Grafana** to track resource usage and service health.
    - **Load Testing:** Leveraged **k6** for stress testing, optimizing the API for high-performance environments.
---
